#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('hospital-e:server');
var http = require('http');
var Post = require('../models/post');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


/**
 * Socket.io
 */
var io = require('socket.io')(server);

io.on('connection', function (socket) {
  console.log("Add connect: " + socket.id);

  socket.on('client-send-comment-new', function(data){
    //Save data in here
    var data_to_db = {
      _id: "COM" + Number(new Date()),
      title: data.message,
      authorId: data.userId,
      active: true
    }

    Post.create(data_to_db, (err, saved_post) => {
      if(err) return handleError(err);
      Post.findOne({_id: data.postId}, (err, one_post) => {
        if(err) return handleError(err);
        one_post.subPostIds.push(data_to_db);
        one_post.save(function(err0, updatePost){
          if(err) return handleError(err);
        });
      });
    });

    var data_send = {
      name: data.author,
      message: data.message,
      kind: ""
    }
    if(data.authority == 2){
      data_send.kind = "Nguoi dung";
    }else{
      data_send.kind = "Bac si";
    }
    console.log("render comment");
    io.sockets.emit("server-send-comment-new", data_send);
  });
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
